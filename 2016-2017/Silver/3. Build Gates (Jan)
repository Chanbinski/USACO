#include <stdio.h>
#include <algorithm>
#include <queue> 

using namespace std;

typedef pair < int, int > ii;

const int N = 2005;
queue < pair < int, int > > q;
int n = 0;
bool isFence[N][N] = {false, };
int dx[] = {0, -1, 0, 1};
int dy[] = {1, 0, -1, 0};
int ans = -1;

int main() {
	scanf("%d", &n);
	char dir[n];
	scanf("%s", dir);
	int cx = 1000, cy = 1000;
	isFence[cx][cy] = true;
	for(int i = 0; i < n; i ++) {
		int dirX = 0, dirY = 0;
		if(dir[i] == 'N') dirX = -1;
		else if(dir[i] == 'S') dirX = 1;
		else if(dir[i] == 'E') dirY = -1;
		else dirY = 1;
		for(int a = 0; a < 2; a ++) {
			cx += dirX;
			cy += dirY;
			isFence[cx][cy] = true;
		}
	}
	
	
	for(int i = 0; i < N; i ++) {
		for(int j = 0; j < N; j ++) {
			if(!isFence[i][j]) {
				ans++;
				q.push(ii(i, j));
				isFence[i][j] = true;
				while(!q.empty()) {
					pair < int, int > curr = q.front();
					q.pop();
					for(int i = 0; i < 4; i ++) {
						int nx = curr.first + dx[i];
						int ny = curr.second + dy[i];
						if(0<=nx && nx < N && 0<=ny && ny < N && !isFence[nx][ny]) {
							isFence[nx][ny] = true;
							q.push(ii(nx, ny));
						}
					}
				}
			}
		}
	}
	printf("%d\n", ans);
}
