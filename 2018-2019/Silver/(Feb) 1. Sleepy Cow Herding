/*
NAME: Chanbin Park
PROJ: herding
LANG: C++
DESC: This was hard for me, so I looked at the solution. For the maximum, it was easy. You just need to find whether the very
front or very back has more space. For the minimum, you have to use the continuous sum strategy in order to find out the best space.
*/

#include <stdio.h>
#include <algorithm>
    using namespace std;
    
    int n;
    int a[100005];
    int maxi;
    int mini;
    
    int main() {
        freopen("herding.in", "r", stdin);
        freopen("herding.out", "w", stdout);
        scanf("%d", &n);
        for(int i = 0; i < n; i ++) {
            scanf("%d", &a[i]);
        }
        sort(a, a + n);
        //solve minimum
        int j = 0, best = 0;
        for (int i = 0; i < n; i ++) {
            while (j < n-1 && a[j+1]- a[i] <= n-1) j++;
            best = max(best, j-i+1);
        }
        mini = n - best;
        if(a[n - 2] - a[0] == n - 2 && a[n - 1] - a[n - 2] > 2) mini = 2;
        if(a[n - 1] - a[1] == n - 2 && a[1] - a[0] > 2) mini = 2;
        //solve maximum
        maxi = max(a[n - 2] - a[0], a[n - 1] - a[1]) - (n - 2);
        printf("%d\n%d", mini, maxi);
    }
scanf(" %c", &c);
