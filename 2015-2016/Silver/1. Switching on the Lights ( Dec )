#include <stdio.h>
#include <algorithm>
#include <vector>

using namespace std;

typedef pair < int, int > ii;
const int N = 105;
int n, m;
int ans;
int map[N][N];
vector < pair < int, int > > light_map[N][N];
bool visited[N][N] = { false, };

int dx[] = {1, 0, -1, 0};
int dy[] = {0, -1, 0, 1};

bool did_visit(int cx, int cy) {
    for(int i = 0; i < 4; i ++) {
        if(map[cx + dx[i]][cy + dy[i]] == 1 && visited[cx + dx[i]][cy + dy[i]]) return true;
    }
    return false;
}

void dfs(int x, int y) {
    if(visited[x][y]) return;
    visited[x][y] = true;

    for(int i = 0; i < light_map[x][y].size(); i ++) {
        int cx = light_map[x][y][i].first; int cy = light_map[x][y][i].second;
        if(map[cx][cy] == 0) {
            map[cx][cy] = 1;
            if(did_visit(cx, cy)) {
                dfs(cx, cy);
            }
        }
    }

    for(int i = 0; i < 4; i ++) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if(1<=nx && nx<=n && 1<=ny && ny<=n && map[nx][ny] == 1) {
            //printf("%d %d\n", nx, ny);
            dfs(nx, ny);
        }
    }
}

int main() {
    freopen("lightson.in", "r", stdin);
    freopen("lightson.out", "w", stdout);
    scanf("%d %d", &n, &m);
    for(int i = 0; i < m; i ++) {
        int x, y, a, b; scanf("%d %d %d %d", &x, &y, &a, &b);
        light_map[x][y].push_back(ii(a, b));
    }
    map[1][1] = 1;
    dfs(1, 1);
    for(int i = 1; i <= n; i ++) {
        for(int j = 1; j <= n; j ++) {
            if(map[i][j] == 1) {
                ans++;
            }
        }
    }
    printf("%d", ans);
}
